tot_vacant22 = B25002_003E,
med_inc22 = B21004_001E,
up65_alone22 = B09021_023E,
tot_housingunits22 =B25136_001E,
gross_v_inc_perc22 = B25071_001E,
tot_fb_cuba22 = B05006_143E,
tot_pa_inc22 = B19057_002E,
med_yb22 = B25035_001E,
med_values22 = B25077_001E)%>%
mutate(vacpct22 = (tot_vacant22/tot_housingunits22)) %>%
st_as_sf(crs = crs)
USA_allcba <- USA_allcba %>%
rename(
tot_vacant22 = B25002_003E,
med_inc22 = B21004_001E,
up65_alone22 = B09021_023E,
tot_housingunits22 =B25136_001E,
gross_v_inc_perc22 = B25071_001E,
tot_fb_cuba22 = B05006_143E,
tot_pa_inc22 = B19057_002E,
med_yb22 = B25035_001E,
med_values22 = B25077_001E)%>%
mutate(vacpct22 = (tot_vacant22/tot_housingunits22)) %>%
st_as_sf(crs = crs)
# vars for 2009 and 2022 for change over time comparison
acs_variable_list.2009 <- load_variables(2009, #year
"acs5", #five year ACS estimates
cache = TRUE)
acs09_vars <- c("B06003_013E", #Foreign Born - PLACE OF BIRTH BY SEX IN THE UNITED STATES
"B05002_013E", #Estimate!!Total!!Foreign born - PLACE OF BIRTH BY CITIZENSHIP STATUS
"B05007_039E", #Estimate!!Total!!Latin America!!Caribbean!!- Entered before 1980
"B25002_003E", #stimate!!Total!!Vacant OCCUPANCY STATUS
"B09016_002E", #Estimate!!Total!!In households - HOUSEHOLD TYPE (INCLUDING LIVING ALONE) BY RELATIONSHIP
"B19013_001E", #Estimate!!Median household income in the past 12 months (in 2009 inflation-adjusted dollars)
"B19037A_053E", #Estimate!!Total!!Householder 65 years and over
"B06012_002E", #Total!!Below 100 percent of the poverty level
"B25071_001E", #Median gross rent as a percentage of household income
"B25035_001E", #Median year structure built
"B19057_001E", #Total - PUBLIC ASSISTANCE INCOME IN THE PAST 12 MONTHS FOR HOUSEHOLDS
"B25001_001E", #Total HOUSING UNITS
"B05006_127E", #Total!!Americas!!Latin America!!Caribbean!!Cuba
"B25077_001E") #med values
acs22load <- load_variables(2022, "acs5", cache = TRUE)
acs22_vars <-c("B06012PR_002E", #Tot Below 100 percent of the poverty level
"B25002_003E", #TotalVacant
"B21004_001E", #Median income in the past 12 months (in 2022 inflation-adjusted dollars
"B09021_023E", #65 years and over Lives alone
"B25136_001E", #Total Housing Units
"B25071_001E", #Median gross rent as a percentage of household income
"B05006_143E", #Total:!!Americas:!!Latin America:!!Caribbean:!!Cuba
"B19057_002E", #Total:!!With public assistance income
"B25035_001E", #Median year structure built
"B25077_001E" #med values
)
#get variables in core_based_statistical areas across USA
USA_allcba <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
year = 2022,
variables = acs22_vars,
geometry = TRUE,
output = "wide")
USA_allcba <- USA_allcba %>%
rename(
tot_vacant22 = B25002_003E,
med_inc22 = B21004_001E,
up65_alone22 = B09021_023E,
tot_housingunits22 =B25136_001E,
gross_v_inc_perc22 = B25071_001E,
tot_fb_cuba22 = B05006_143E,
tot_pa_inc22 = B19057_002E,
med_yb22 = B25035_001E,
med_values22 = B25077_001E)%>%
mutate(vacpct22 = (tot_vacant22/tot_housingunits22)) %>%
st_as_sf(crs = crs)
view(USA_allcba)
USA_allcba <- USA_allcba %>%
rename(total_below_pov=B06012PR_002E,
tot_vacant22 = B25002_003E,
med_inc22 = B21004_001E,
up65_alone22 = B09021_023E,
tot_housingunits22 =B25136_001E,
gross_v_inc_perc22 = B25071_001E,
tot_fb_cuba22 = B05006_143E,
tot_pa_inc22 = B19057_002E,
med_yb22 = B25035_001E,
med_values22 = B25077_001E)%>%
mutate(vacpct22 = (tot_vacant22/tot_housingunits22)) %>%
st_as_sf(crs = crs)
#get variables in core_based_statistical areas across USA
USA_allcba <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
year = 2022,
variables = acs22_vars,
geometry = TRUE,
output = "wide")
USA_allcba <- USA_allcba %>%
rename(total_below_pov=B06012PR_002E,
tot_vacant22 = B25002_003E,
med_inc22 = B21004_001E,
up65_alone22 = B09021_023E,
tot_housingunits22 =B25136_001E,
gross_v_inc_perc22 = B25071_001E,
tot_fb_cuba22 = B05006_143E,
tot_pa_inc22 = B19057_002E,
med_yb22 = B25035_001E,
med_values22 = B25077_001E)%>%
mutate(vacpct22 = (tot_vacant22/tot_housingunits22)) %>%
st_as_sf(crs = crs)
view(USA_allcba)
# Assuming your dataframe is named df and the column of interest is 'Name'
USA_micros <- USA_allcba %>%
filter(grepl("Micro", NAME, ignore.case = TRUE)) %>%
select(NAME, GEOID,tot_housingunits22,gross_v_inc_perc22,tot_fb_cuba22,med_yb22, vacpct22) %>%
filter(tot_fb_cuba22 >= 100)%>%
arrange(desc(tot_fb_cuba22))
USA_metros <- USA_allcba %>%
filter(grepl("Metro", NAME, ignore.case=TRUE)) %>%
select(NAME, GEOID,tot_housingunits22,gross_v_inc_perc22,tot_fb_cuba22,med_yb22, vacpct22) %>%
filter(tot_fb_cuba22 >= 1000)%>%
arrange(desc(tot_fb_cuba22))
view(USA_metros)
view(USA_micros)
noFL_micros <- USA_micros %>%
filter(!grepl("FL M", NAME, ignore.case = TRUE))
noFL_metros <-USA_metros %>%
filter(!grepl("FL M" , NAME, ignore.case= TRUE))
fl_micros <- USA_micros %>%
filter(grepl("FL M", NAME, ignore.case = TRUE))
fl_metros <-USA_metros %>%
filter(grepl("FL M" , NAME, ignore.case= TRUE))
view(noFL_metros)
view(noFL_micros)
view(fl_micros)
view(fl_metros)
USA_2009 <- get_acs(geography = "county",
year = 2009,
variables = acs09_vars,
geometry = TRUE,
output = "wide")
USA_2009 <- USA_2009 %>%
rename(
fb_placebysex.2009 = B06003_013E,
totalfb_placebycitizenshipstatus.2009 = B05002_013E,
total_carib_1980.2009 = B05007_039E,
total_vacancy_O_status.2009 = B25002_003E,
total_householdtype_relationship.09 = B09016_002E,
med_hh_inc.09 = B19013_001E,
hh_65up.09 = B19037A_053E,
Total_b_100pov.09 = B06012_002E,
gross_v_income_percentage.09 = B25071_001E,
med_built_year.09 = B25035_001E,
tot_publicass_inc.09 = B19057_001E,
tot_housingunits.09 = B25001_001E,
cub_fb_total09 = B05006_127E,
med_houseval09 = B25077_001E
)%>%
mutate(vacancyPct.2009 = total_vacancy_O_status.2009/tot_housingunits.09) %>% # Get Vacanct Rate
st_as_sf(crs = crs)
USA_2022 <- get_acs(geography = "county",
year = 2022,
variables = acs22_vars,
geometry = TRUE,
output = "wide")
USA_2022 <- USA_2022 %>%
rename(
tot_below100pov22 = B06012PR_002E,
tot_vacant22 = B25002_003E,
med_inc22 = B21004_001E,
up65_alone22 = B09021_023E,
tot_housingunits22 =B25136_001E,
gross_v_inc_perc22 = B25071_001E,
tot_fb_cuba22 = B05006_143E,
tot_pa_inc22 = B19057_002E,
med_yb22 = B25035_001E,
med_values22 = B25077_001E)%>%
mutate(vacpct22 = (tot_vacant22/tot_housingunits22)) %>%
st_as_sf(crs = crs)
#Merge the dataframes
USA0922_df <- st_drop_geometry(USA_2022,USA_2009)%>%
left_join(USA_2009 , USA_2022, by= c("GEOID"))%>%
mutate(change_vac_pct = vacpct22 - vacancyPct.2009,
change_med_inc = med_inc22 - med_hh_inc.09,
change_med_values = med_values22 - med_houseval09,
change_cuba_fb = tot_fb_cuba22 - cub_fb_total09,
change_pct_below100pov = tot_below100pov22 - Total_b_100pov.09)
#===========================================================
#This does not work, returns multiples of the same county
#===========================================================
#sf.ACS0922 <-st_join(USA_2009,USA_2022)%>%
# mutate(change_vac_pct = vacpct22 - vacancyPct.2009,
#      change_med_inc = med_inc22 - med_hh_inc.09,
#     change_med_values = med_values22 - med_houseval09,
#     change_cuba_fb = tot_fb_cuba22 - cub_fb_total09,
#      change_pct_below100pov = tot_below100pov22 - Total_b_100pov.09)
#Filter to get the largest and lowest decreases. using 500 is an arbitrary number. With more feedback and domain knowledge I could choose another
USA0922_df_filtered_decrease <- USA0922_df %>%
filter(change_cuba_fb < -500)%>%
select(NAME.x, GEOID, geometry,med_inc22,up65_alone22, tot_housingunits22, gross_v_inc_perc22,                                 tot_pa_inc22,med_values22, vacpct22, change_med_values, change_med_inc,                         change_vac_pct)
USA0922_df_filtered_increase <- USA0922_df %>%
filter(change_cuba_fb > 500) %>%
select(NAME.x, GEOID, geometry, med_inc22,up65_alone22, tot_housingunits22, gross_v_inc_perc22,                                 tot_pa_inc22,med_values22, vacpct22, change_med_values, change_med_inc,                         change_vac_pct)
#Combine the two dfs because it is the object that will be used to create the dictionary for the get acs call
change_fbcuban0922<- rbind(USA0922_df_filtered_decrease, USA0922_df_filtered_increase)
var_list_final<- unique(change_fbcuban0922)
#use this ^^^^^ to create model for analysis
change_fbcuban0922_split <- change_fbcuban0922 %>%
mutate(
split_data = map(NAME.x, split_county_state),
County = map_chr(split_data, "county"),
State = map_chr(split_data, "state")
) %>%
select(-split_data)%>%
mutate(cleaned_County = sapply(County, clean_county_name))# Remove the list column after extracting components
iterate_county22 <- function(df) {
# List to store the results
results_list <- list()
# Loop over each row of the dataframe
for (i in 1:nrow(df)) {
# Extract county and state from the current row
County <- df$cleaned_County[i]
State <- df$State[i]
# Try to fetch ACS data, handling errors
acs_data <- tryCatch({
get_acs(
geography = "tract",  # Make sure geography is correctly specified
variables = "B05006_143E",  # Example variable: Total Population
state = State,
county = County,
year = 2022,
survey = "acs5",
geometry = TRUE
)
}, error = function(e) {
message("Failed for ", County, ", ", State, ": ", e$message)
NULL  # Return NULL on failure
})
# Append the fetched data to the list, if not NULL
if (!is.null(acs_data)) {
results_list[[length(results_list) + 1]] <- acs_data
}
}
# Combine all the results into one data frame
final_data <- bind_rows(results_list)
return(final_data)
}
iterate_county09 <- function(df) {
# List to store the results
results_list <- list()
# Loop over each row of the dataframe
for (i in 1:nrow(df)) {
# Extract county and state from the current row
County <- df$cleaned_County[i]
State <- df$State[i]
# Try to fetch ACS data, handling errors
acs_data <- tryCatch({
get_acs(
geography = "tract",  # Make sure geography is correctly specified
variables = "B05006_127E",  # Example variable: Total Population
state = State,
county = County,
year = 2009,
survey = "acs5",
geometry = TRUE
)
}, error = function(e) {
message("Failed for ", County, ", ", State, ": ", e$message)
NULL  # Return NULL on failure
})
# Append the fetched data to the list, if not NULL
if (!is.null(acs_data)) {
results_list[[length(results_list) + 1]] <- acs_data
}
}
# Combine all the results into one data frame
final_data <- bind_rows(results_list)
return(final_data)
}
final_acs09_data <- iterate_county09(change_fbcuban0922_split)
final_acs22_data <- iterate_county22(change_fbcuban0922_split)
#wrangle the data a bit to get the change over time at the census tract level
final_acs09_data<-final_acs09_data %>%
rename(cub_fb_total09 = estimate)
final_acs22_data<- final_acs22_data %>%
rename(tot_fb_cuba22 = estimate)
final_viz_change <- st_drop_geometry(final_acs09_data) %>%
select(GEOID, cub_fb_total09) %>%  # Select only the columns needed for computing change
left_join(final_acs22_data, by = "GEOID") %>%
mutate(change_cuba_fb = tot_fb_cuba22 - cub_fb_total09)
#dropNA values in change
final_viz_change_droppedNA <- final_viz_change[!is.na(final_viz_change$change_cuba_fb), ]
#remove florida from the object to see it better
#as percent change
final_viz_pct_change <- st_drop_geometry(final_acs09_data) %>%
select(GEOID, cub_fb_total09) %>%  # Select only the columns needed for computing change
left_join(final_acs22_data, by = "GEOID") %>%
mutate(pct_change_cuba_fb = (((tot_fb_cuba22 - cub_fb_total09)/cub_fb_total09))*100)
#as percent change
final_viz_pct_change <- st_drop_geometry(final_acs09_data) %>%
select(GEOID, cub_fb_total09) %>%  # Select only the columns needed for computing change
left_join(final_acs22_data, by = "GEOID") %>%
mutate(pct_change_cuba_fb = (((tot_fb_cuba22 - cub_fb_total09)/cub_fb_total09))*100)
#as percent change
final_viz_pct_change <- st_drop_geometry(final_acs09_data) %>%
select(GEOID, cub_fb_total09) %>%  # Select only the columns needed for computing change
left_join(final_acs22_data, by = "GEOID") %>%
mutate(pct_change_cuba_fb = (((tot_fb_cuba22 - cub_fb_total09)/cub_fb_total09))*100)%>%
final_viz_pct_change[!is.na(final_viz_pct_change$pct_change_cuba_fb), ]
#as percent change
final_viz_pct_change <- st_drop_geometry(final_acs09_data) %>%
select(GEOID, cub_fb_total09) %>%  # Select only the columns needed for computing change
left_join(final_acs22_data, by = "GEOID") %>%
mutate(pct_change_cuba_fb = (((tot_fb_cuba22 - cub_fb_total09)/cub_fb_total09))*100)
final_viz_pct_change<- final_viz_pct_change[!is.na(final_viz_pct_change$pct_change_cuba_fb), ]
#as percent change
final_viz_pct_change <- st_drop_geometry(final_acs09_data) %>%
select(GEOID, cub_fb_total09) %>%  # Select only the columns needed for computing change
left_join(final_acs22_data, by = "GEOID") %>%
mutate(pct_change_cuba_fb = (((tot_fb_cuba22 - cub_fb_total09)/cub_fb_total09))*100)
View(final_viz_pct_change)
final_viz_pct_change<- final_viz_pct_change[!is.na(final_viz_pct_change$pct_change_cuba_fb), ]
#as percent change
final_viz_pct_change <- st_drop_geometry(final_acs09_data) %>%
select(GEOID, cub_fb_total09) %>%  # Select only the columns needed for computing change
left_join(final_acs22_data, by = "GEOID") %>%
mutate(pct_change_cuba_fb = (((tot_fb_cuba22 - cub_fb_total09)/cub_fb_total09))*100)
final_viz_pct_change<- final_viz_pct_change[!is.na(final_viz_pct_change$pct_change_cuba_fb), ]
#as percent change
final_viz_pct_change <- st_drop_geometry(final_acs09_data) %>%
select(GEOID, cub_fb_total09) %>%  # Select only the columns needed for computing change
left_join(final_acs22_data, by = "GEOID") %>%
mutate(pct_change_cuba_fb = (((tot_fb_cuba22 - cub_fb_total09)/cub_fb_total09))*100)
View(final_viz_pct_change)
met_micro_boundaries<-change_fbcuban0922%>%
st_as_sf(change_fbcuban0922, geometry=geometry)
??st_as_sf
met_micro_boundaries<-change_fbcuban0922%>%
st_as_sf(sf_column_name=geometry)
met_micro_boundaries<-change_fbcuban0922%>%
st_as_sf(sf_column_name=change_fbcuban0922$geometry)
View(change_fbcuban0922)
View(change_fbcuban0922)
clear
cls
#we are going to intercect all metro and micro areas with the selected counties object 'change_fbcuban0922'
met_micro_boundaries<-change_fbcuban0922%>%
st_as_sf(sf_column_name=names(change_fbcuban0922$geometry))
str(met_micro_boundaries)
change_fbcuban0922 <-change_fbcuban0922%>%
st_as_sf(sf_column_name=names(change_fbcuban0922$geometry))
me <-change_fbcuban0922%>%
st_as_sf(sf_column_name='geometry')
metro_micro_boundaries_final <-change_fbcuban0922%>%
st_as_sf(sf_column_name='geometry')%>%
st_intersection(USA_allcba)
View(metro_micro_boundaries_final)
View(final_viz_change_droppedNA)
# Set tmap mode to interactive viewing
tmap_mode("view")
# Install (if necessary) and load the tmap package
if (!requireNamespace("tmap", quietly = TRUE)) {
install.packages("tmap")
}
library(tmap)
# Set tmap mode to interactive viewing
tmap_mode("view")
# Create the map
tm <- tm_shape(metro_micro_boundaries_final) +
tm_borders(col = "black") +  # Adds borders to metro_micro
tm_shape(final_viz_change_droppedNA) +  # Adds the 'final' object
tm_polygons("change_cuba_fb", title = "Change in Count of Foreign Born Cubans",
palette = "-RdYlBu",  # Color palette
style = "quantile",  # Classification style
border.col = "white",  # Border color for polygons in 'final'
border.alpha = 0.5)  # Border transparency
# Print the map
tm
final_viz_change_droppedNA<- final_viz_change_droppedNA%>%
st_as_sf(sf_column_name='geometry')
# Install (if necessary) and load the tmap package
if (!requireNamespace("tmap", quietly = TRUE)) {
install.packages("tmap")
}
library(tmap)
# Set tmap mode to interactive viewing
tmap_mode("view")
# Create the map
tm <- tm_shape(metro_micro_boundaries_final) +
tm_borders(col = "black") +  # Adds borders to metro_micro
tm_shape(final_viz_change_droppedNA) +  # Adds the 'final' object
tm_polygons("change_cuba_fb", title = "Change in Count of Foreign Born Cubans",
palette = "-RdYlBu",  # Color palette
style = "quantile",  # Classification style
border.col = "white",  # Border color for polygons in 'final'
border.alpha = 0.5)  # Border transparency
# Print the map
tm
# Install (if necessary) and load the tmap package
if (!requireNamespace("tmap", quietly = TRUE)) {
install.packages("tmap")
}
library(tmap)
tmap_options(check.and.fix = TRUE)
# Set tmap mode to interactive viewing
tmap_mode("view")
# Create the map
tm <- tm_shape(metro_micro_boundaries_final) +
tm_borders(col = "black") +  # Adds borders to metro_micro
tm_shape(final_viz_change_droppedNA) +  # Adds the 'final' object
tm_polygons("change_cuba_fb", title = "Change in Count of Foreign Born Cubans",
palette = "-RdYlBu",  # Color palette
style = "quantile",  # Classification style
border.col = "white",  # Border color for polygons in 'final'
border.alpha = 0.5)  # Border transparency
# Print the map
tm
metro_micro_boundaries_final <-USA_allcba%>%
st_as_sf(sf_column_name='geometry')%>%
st_intersection(change_fbcuban0922)
# Install (if necessary) and load the tmap package
if (!requireNamespace("tmap", quietly = TRUE)) {
install.packages("tmap")
}
library(tmap)
tmap_options(check.and.fix = TRUE)
# Set tmap mode to interactive viewing
tmap_mode("view")
# Create the map
tm <- tm_shape(metro_micro_boundaries_final) +
tm_borders(col = "black") +  # Adds borders to metro_micro
tm_shape(final_viz_change_droppedNA) +  # Adds the 'final' object
tm_polygons("change_cuba_fb", title = "Change in Count of Foreign Born Cubans",
palette = "-RdYlBu",  # Color palette
style = "quantile",  # Classification style
border.col = "white",  # Border color for polygons in 'final'
border.alpha = 0.5)  # Border transparency
# Print the map
tm
View(metro_micro_boundaries_final)
# Install (if necessary) and load the tmap package
if (!requireNamespace("tmap", quietly = TRUE)) {
install.packages("tmap")
}
library(tmap)
tmap_options(check.and.fix = TRUE)
# Set tmap mode to interactive viewing
tmap_mode("view")
# Create the map
tm <- tm_shape(metro_micro_boundaries_final) +
tm_borders(col = "black") +  # Adds borders to metro_micro
tm_tip(c("NAME"), labels = c("NAME:"))+
tm_shape(final_viz_change_droppedNA) +  # Adds the 'final' object
tm_polygons("change_cuba_fb", title = "Change in Count of Foreign Born Cubans",
palette = "-RdYlBu",  # Color palette
style = "quantile",  # Classification style
border.col = "white",  # Border color for polygons in 'final'
border.alpha = 0.5)  # Border transparency
# Install (if necessary) and load the tmap package
if (!requireNamespace("tmap", quietly = TRUE)) {
install.packages("tmap")
}
library(tmap)
tmap_options(check.and.fix = TRUE)
# Set tmap mode to interactive viewing
tmap_mode("view")
# Create the map
tm <- tm_shape(metro_micro_boundaries_final) +
tm_borders(col = "black") +  # Adds borders to metro_micro
tm_labels(c("NAME"), labels = c("NAME:"))+
tm_shape(final_viz_change_droppedNA) +  # Adds the 'final' object
tm_polygons("change_cuba_fb", title = "Change in Count of Foreign Born Cubans",
palette = "-RdYlBu",  # Color palette
style = "quantile",  # Classification style
border.col = "white",  # Border color for polygons in 'final'
border.alpha = 0.5)  # Border transparency
# Install (if necessary) and load the tmap package
if (!requireNamespace("tmap", quietly = TRUE)) {
install.packages("tmap")
}
library(tmap)
tmap_options(check.and.fix = TRUE)
# Set tmap mode to interactive viewing
tmap_mode("view")
# Create the map
tm <- tm_shape(metro_micro_boundaries_final) +
tm_borders(col = "black") +  # Adds borders to metro_micro
tm_text("NAME", size = 0.5)+
tm_shape(final_viz_change_droppedNA) +  # Adds the 'final' object
tm_polygons("change_cuba_fb", title = "Change in Count of Foreign Born Cubans",
palette = "-RdYlBu",  # Color palette
style = "quantile",  # Classification style
border.col = "white",  # Border color for polygons in 'final'
border.alpha = 0.5)  # Border transparency
# Print the map
tm
#tm_tip(c("change_cuba_fb", "other_attribute1", "other_attribute2"), labels = c("Change FB:", "Attribute 1:", "Attribute 2:"))  # Tooltips showing attributes
# Install (if necessary) and load the tmap package
if (!requireNamespace("tmap", quietly = TRUE)) {
install.packages("tmap")
}
library(tmap)
tmap_options(check.and.fix = TRUE)
# Set tmap mode to interactive viewing
tmap_mode("view")
# Create the map
tm <-
tm_shape(final_viz_change_droppedNA) +  # Adds the 'final' object
tm_polygons("change_cuba_fb", title = "Change in Count of Foreign Born Cubans",
palette = "-RdYlBu",  # Color palette
style = "quantile",  # Classification style
border.col = "white",  # Border color for polygons in 'final'
border.alpha = 0.5)  # Border transparency
# Print the map
tm
#tm_tip(c("change_cuba_fb", "other_attribute1", "other_attribute2"), labels = c("Change FB:", "Attribute 1:", "Attribute 2:"))  # Tooltips showing attributes
